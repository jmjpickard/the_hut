{"ast":null,"code":"var _jsxFileName = \"/Users/jackpickard/Documents/Analytics/the_hut/web-app/src/components/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport VpnKeyIcon from \"@mui/icons-material/VpnKey\";\nimport Box from \"@mui/material/Box\"; // Shape of form values\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"25px\",\n    gap: \"25px\"\n  },\n  error: {\n    fontSize: 14,\n    color: \"red\"\n  },\n  button: {\n    backgroundColor: \"#6AAEB2\",\n    color: \"white\",\n    fontWeight: \"bold\",\n    height: \"40px\"\n  },\n  input: {\n    backgroundColor: \"#A5E9F2\"\n  },\n  header: {\n    textAlign: \"center\",\n    color: \"#6AAEB2\"\n  },\n  bottomRow: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  link: {\n    color: \"#ADADAD\",\n    cursor: \"pointer\",\n    textDecoration: \"underline\"\n  }\n}; // Aside: You may see InjectedFormikProps<OtherProps, FormValues> instead of what comes below in older code.. InjectedFormikProps was artifact of when Formik only exported a HoC. It is also less flexible as it MUST wrap all props (it passes them through).\n\nconst InnerForm = props => {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      email: props.initialEmail || \"\",\n      password: \"\"\n    },\n    validationSchema: LoginValidation,\n    onSubmit: values => {\n      return fetch(`${process.env.REACT_APP_API_URL}/login`, {\n        method: \"POST\",\n        body: JSON.stringify(values),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      }).then(res => res.json()).then(data => {\n        localStorage.setItem(\"token\", data.accessToken);\n        localStorage.setItem(\"idToken\", data.idToken);\n        window.location.reload();\n      });\n    }\n  });\n  const {\n    message\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formik.handleSubmit,\n    style: styles.form,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: styles.header,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        alignItems: \"flex-end\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(AccountCircle, {\n        sx: {\n          color: \"action.active\",\n          mr: 1,\n          my: 0.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"email\",\n        name: \"email\",\n        label: \"Email\",\n        value: formik.values.email,\n        onChange: formik.handleChange,\n        error: formik.touched.email && Boolean(formik.errors.email),\n        helperText: formik.touched.email && formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\",\n        alignItems: \"flex-end\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(VpnKeyIcon, {\n        sx: {\n          color: \"action.active\",\n          mr: 1,\n          my: 0.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        id: \"password\",\n        name: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        value: formik.values.password,\n        onChange: formik.handleChange,\n        error: formik.touched.password && Boolean(formik.errors.password),\n        helperText: formik.touched.password && formik.errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      style: styles.button,\n      variant: \"contained\",\n      fullWidth: true,\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InnerForm, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c = InnerForm;\nconst LoginValidation = Yup.object().shape({\n  email: Yup.string().email().required(),\n  password: Yup.string().required(\"Please Enter your password\").matches(/^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/, \"Password must contain at least 8 characters, one uppercase, one number and one special case character\")\n}); // Wrap our form with the withFormik HoC\n\nexport const Login = InnerForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InnerForm\");","map":{"version":3,"sources":["/Users/jackpickard/Documents/Analytics/the_hut/web-app/src/components/Login.tsx"],"names":["React","Yup","useFormik","Button","TextField","AccountCircle","VpnKeyIcon","Box","styles","form","display","flexDirection","padding","gap","error","fontSize","color","button","backgroundColor","fontWeight","height","input","header","textAlign","bottomRow","justifyContent","link","cursor","textDecoration","InnerForm","props","formik","initialValues","email","initialEmail","password","validationSchema","LoginValidation","onSubmit","values","fetch","process","env","REACT_APP_API_URL","method","body","JSON","stringify","headers","Accept","then","res","json","data","localStorage","setItem","accessToken","idToken","window","location","reload","message","handleSubmit","alignItems","mr","my","handleChange","touched","Boolean","errors","object","shape","string","required","matches","Login"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB,C,CACA;;;AAWA,MAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,aAAa,EAAE,QAFX;AAGJC,IAAAA,OAAO,EAAE,MAHL;AAIJC,IAAAA,GAAG,EAAE;AAJD,GADO;AAObC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,KAAK,EAAE;AAFF,GAPM;AAWbC,EAAAA,MAAM,EAAE;AACNC,IAAAA,eAAe,EAAE,SADX;AAENF,IAAAA,KAAK,EAAE,OAFD;AAGNG,IAAAA,UAAU,EAAE,MAHN;AAINC,IAAAA,MAAM,EAAE;AAJF,GAXK;AAiBbC,EAAAA,KAAK,EAAE;AACLH,IAAAA,eAAe,EAAE;AADZ,GAjBM;AAoBbI,EAAAA,MAAM,EAAE;AACNC,IAAAA,SAAS,EAAE,QADL;AAENP,IAAAA,KAAK,EAAE;AAFD,GApBK;AAwBbQ,EAAAA,SAAS,EAAE;AACTd,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,aAAa,EAAE,KAFN;AAGTc,IAAAA,cAAc,EAAE;AAHP,GAxBE;AA6BbC,EAAAA,IAAI,EAAE;AACJV,IAAAA,KAAK,EAAE,SADH;AAEJW,IAAAA,MAAM,EAAE,SAFJ;AAGJC,IAAAA,cAAc,EAAE;AAHZ;AA7BO,CAAf,C,CAoCA;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAuB;AAAA;;AACvC,QAAMC,MAAM,GAAG7B,SAAS,CAAC;AACvB8B,IAAAA,aAAa,EAAE;AACbC,MAAAA,KAAK,EAAEH,KAAK,CAACI,YAAN,IAAsB,EADhB;AAEbC,MAAAA,QAAQ,EAAE;AAFG,KADQ;AAKvBC,IAAAA,gBAAgB,EAAEC,eALK;AAOvBC,IAAAA,QAAQ,EAAGC,MAAD,IAAwB;AAChC,aAAOC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAmB,QAAnC,EAA4C;AACtDC,QAAAA,MAAM,EAAE,MAD8C;AAEtDC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,MAAf,CAFgD;AAGtDS,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AAH6C,OAA5C,CAAL,CAQJC,IARI,CAQEC,GAAD,IAASA,GAAG,CAACC,IAAJ,EARV,EASJF,IATI,CASEG,IAAD,IAAU;AACdC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,WAAnC;AACAF,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCF,IAAI,CAACI,OAArC;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAbI,CAAP;AAcD;AAtBsB,GAAD,CAAxB;AAyBA,QAAM;AAAEC,IAAAA;AAAF,MAAc/B,KAApB;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEC,MAAM,CAAC+B,YAAvB;AAAqC,IAAA,KAAK,EAAEtD,MAAM,CAACC,IAAnD;AAAA,4BACE;AAAI,MAAA,KAAK,EAAED,MAAM,CAACc,MAAlB;AAAA,gBAA2BuC;AAA3B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEnD,QAAAA,OAAO,EAAE,MAAX;AAAmBqD,QAAAA,UAAU,EAAE;AAA/B,OAAT;AAAA,8BACE,QAAC,aAAD;AAAe,QAAA,EAAE,EAAE;AAAE/C,UAAAA,KAAK,EAAE,eAAT;AAA0BgD,UAAAA,EAAE,EAAE,CAA9B;AAAiCC,UAAAA,EAAE,EAAE;AAArC;AAAnB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,KAAK,EAAC,OAJR;AAKE,QAAA,KAAK,EAAElC,MAAM,CAACQ,MAAP,CAAcN,KALvB;AAME,QAAA,QAAQ,EAAEF,MAAM,CAACmC,YANnB;AAOE,QAAA,KAAK,EAAEnC,MAAM,CAACoC,OAAP,CAAelC,KAAf,IAAwBmC,OAAO,CAACrC,MAAM,CAACsC,MAAP,CAAcpC,KAAf,CAPxC;AAQE,QAAA,UAAU,EAAEF,MAAM,CAACoC,OAAP,CAAelC,KAAf,IAAwBF,MAAM,CAACsC,MAAP,CAAcpC;AARpD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAeE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE;AAAEvB,QAAAA,OAAO,EAAE,MAAX;AAAmBqD,QAAAA,UAAU,EAAE;AAA/B,OAAT;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,EAAE,EAAE;AAAE/C,UAAAA,KAAK,EAAE,eAAT;AAA0BgD,UAAAA,EAAE,EAAE,CAA9B;AAAiCC,UAAAA,EAAE,EAAE;AAArC;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,EAAE,EAAC,UAFL;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,KAAK,EAAC,UAJR;AAKE,QAAA,IAAI,EAAC,UALP;AAME,QAAA,KAAK,EAAElC,MAAM,CAACQ,MAAP,CAAcJ,QANvB;AAOE,QAAA,QAAQ,EAAEJ,MAAM,CAACmC,YAPnB;AAQE,QAAA,KAAK,EAAEnC,MAAM,CAACoC,OAAP,CAAehC,QAAf,IAA2BiC,OAAO,CAACrC,MAAM,CAACsC,MAAP,CAAclC,QAAf,CAR3C;AASE,QAAA,UAAU,EAAEJ,MAAM,CAACoC,OAAP,CAAehC,QAAf,IAA2BJ,MAAM,CAACsC,MAAP,CAAclC;AATvD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eA6BE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE3B,MAAM,CAACS,MAAtB;AAA8B,MAAA,OAAO,EAAC,WAAtC;AAAkD,MAAA,SAAS,MAA3D;AAA4D,MAAA,IAAI,EAAC,QAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CA/DD;;GAAMY,S;UACW3B,S;;;KADX2B,S;AAiEN,MAAMQ,eAAe,GAAGpC,GAAG,CAACqE,MAAJ,GAAaC,KAAb,CAAmB;AACzCtC,EAAAA,KAAK,EAAEhC,GAAG,CAACuE,MAAJ,GAAavC,KAAb,GAAqBwC,QAArB,EADkC;AAEzCtC,EAAAA,QAAQ,EAAElC,GAAG,CAACuE,MAAJ,GACPC,QADO,CACE,4BADF,EAEPC,OAFO,CAGN,6FAHM,EAIN,uGAJM;AAF+B,CAAnB,CAAxB,C,CAUA;;AACA,OAAO,MAAMC,KAAK,GAAG9C,SAAd","sourcesContent":["import React from \"react\";\nimport * as Yup from \"yup\";\nimport { useFormik } from \"formik\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport VpnKeyIcon from \"@mui/icons-material/VpnKey\";\nimport Box from \"@mui/material/Box\";\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n  initialEmail?: string;\n}\n\nconst styles = {\n  form: {\n    display: \"flex\",\n    flexDirection: \"column\" as \"column\",\n    padding: \"25px\",\n    gap: \"25px\",\n  },\n  error: {\n    fontSize: 14,\n    color: \"red\",\n  },\n  button: {\n    backgroundColor: \"#6AAEB2\",\n    color: \"white\",\n    fontWeight: \"bold\" as \"bold\",\n    height: \"40px\",\n  },\n  input: {\n    backgroundColor: \"#A5E9F2\",\n  },\n  header: {\n    textAlign: \"center\" as \"center\",\n    color: \"#6AAEB2\",\n  },\n  bottomRow: {\n    display: \"flex\",\n    flexDirection: \"row\" as \"row\",\n    justifyContent: \"space-between\",\n  },\n  link: {\n    color: \"#ADADAD\",\n    cursor: \"pointer\",\n    textDecoration: \"underline\",\n  },\n};\n\n// Aside: You may see InjectedFormikProps<OtherProps, FormValues> instead of what comes below in older code.. InjectedFormikProps was artifact of when Formik only exported a HoC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps) => {\n  const formik = useFormik({\n    initialValues: {\n      email: props.initialEmail || \"\",\n      password: \"\",\n    },\n    validationSchema: LoginValidation,\n\n    onSubmit: (values: FormValues) => {\n      return fetch(`${process.env.REACT_APP_API_URL!}/login`, {\n        method: \"POST\",\n        body: JSON.stringify(values),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          localStorage.setItem(\"token\", data.accessToken);\n          localStorage.setItem(\"idToken\", data.idToken);\n          window.location.reload();\n        });\n    },\n  });\n\n  const { message } = props;\n\n  return (\n    <form onSubmit={formik.handleSubmit} style={styles.form}>\n      <h1 style={styles.header}>{message}</h1>\n      <Box sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\n        <AccountCircle sx={{ color: \"action.active\", mr: 1, my: 0.5 }} />\n        <TextField\n          fullWidth\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n      </Box>\n      <Box sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\n        <VpnKeyIcon sx={{ color: \"action.active\", mr: 1, my: 0.5 }} />\n        <TextField\n          fullWidth\n          id=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n      </Box>\n      <Button style={styles.button} variant=\"contained\" fullWidth type=\"submit\">\n        Submit\n      </Button>\n    </form>\n  );\n};\n\nconst LoginValidation = Yup.object().shape({\n  email: Yup.string().email().required(),\n  password: Yup.string()\n    .required(\"Please Enter your password\")\n    .matches(\n      /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\n      \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\n    ),\n});\n\n// Wrap our form with the withFormik HoC\nexport const Login = InnerForm;\n"]},"metadata":{},"sourceType":"module"}