import React, { createContext, useContext, useRef, useEffect, useCallback } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var Types;

(function (Types) {
  Types["SHOW"] = "SHOW";
  Types["HIDE"] = "HIDE";
  Types["UPDATE"] = "UPDATE";
  Types["DESTROY"] = "DESTROY";
  Types["DESTROY_BY_ROOT_ID"] = "DESTROY_BY_ROOT_ID";
  Types["UNKNOWN"] = "UNKNOWN";
})(Types || (Types = {}));

var initialState = {};
function reducer(state, action) {
  switch (action.type) {
    case Types.SHOW:
      {
        var _extends2;

        var _action$payload = action.payload,
            id = _action$payload.id,
            component = _action$payload.component,
            props = _action$payload.props,
            options = _action$payload.options;
        return _extends({}, state, (_extends2 = {}, _extends2[id] = {
          component: component,
          props: _extends({}, props, {
            open: true
          }),
          options: options
        }, _extends2));
      }

    case Types.HIDE:
      {
        var _extends3;

        var _id = action.payload.id;

        if (!state[_id]) {
          return state;
        }

        return _extends({}, state, (_extends3 = {}, _extends3[_id] = _extends({}, state[_id], {
          props: _extends({}, state[_id].props, {
            open: false
          })
        }), _extends3));
      }

    case Types.UPDATE:
      {
        var _extends4;

        var _action$payload2 = action.payload,
            _id2 = _action$payload2.id,
            _props = _action$payload2.props;

        if (!state[_id2]) {
          return state;
        }

        return _extends({}, state, (_extends4 = {}, _extends4[_id2] = _extends({}, state[_id2], {
          props: _extends({}, state[_id2].props, _props)
        }), _extends4));
      }

    case Types.DESTROY:
      {
        var _id3 = action.payload.id;

        var newState = _extends({}, state);

        delete newState[_id3];
        return newState;
      }

    case Types.DESTROY_BY_ROOT_ID:
      {
        var rootId = action.payload.rootId;
        return Object.keys(state).filter(function (key) {
          return key.split('.')[0] !== rootId;
        }).reduce(function (acc, key) {
          var _extends5;

          return _extends({}, acc, (_extends5 = {}, _extends5[key] = state[key], _extends5));
        }, {});
      }

    default:
      throw new Error('Unexpected action');
  }
}

var initialContextState = {
  state: initialState,
  hideModal: function hideModal() {},
  showModal: function showModal() {
    return {
      id: 'id',
      hide: function hide() {},
      destroy: function destroy() {},
      update: function update() {}
    };
  },
  destroyModal: function destroyModal() {},
  updateModal: function updateModal() {},
  destroyModalsByRootId: function destroyModalsByRootId() {}
};
var ModalContext = /*#__PURE__*/createContext(initialContextState);

var MISSED_MODAL_ID_ERROR_MESSAGE = '[ERROR]: Modal ID is missing';
var MISSED_MODAL_ROOT_ID_ERROR_MESSAGE = '[ERROR]: Modal root ID is missing';

var uid = function uid(len) {
  if (len === void 0) {
    len = 8;
  }

  var buf = [];
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  var charlen = chars.length;

  for (var i = 0; i < len; i++) {
    buf[i] = chars.charAt(Math.floor(Math.random() * charlen));
  }

  return buf.join('');
};

function ModalProvider(_ref) {
  var children = _ref.children,
      _ref$legacy = _ref.legacy,
      legacy = _ref$legacy === void 0 ? false : _ref$legacy;

  var _React$useReducer = React.useReducer(reducer, initialState),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  var _update = React.useCallback(function (id, _ref2) {
    var props = _objectWithoutPropertiesLoose(_ref2, ["open"]);

    if (!id) {
      console.error(MISSED_MODAL_ID_ERROR_MESSAGE);
      return;
    }

    dispatch({
      type: Types.UPDATE,
      payload: {
        id: id,
        props: props
      }
    });
  }, [dispatch]);

  var _hide = React.useCallback(function (id) {
    if (!id) {
      console.error(MISSED_MODAL_ID_ERROR_MESSAGE);
      return;
    }

    dispatch({
      type: Types.HIDE,
      payload: {
        id: id
      }
    });
  }, [dispatch]);

  var _destroy = React.useCallback(function (id) {
    if (!id) {
      console.error(MISSED_MODAL_ID_ERROR_MESSAGE);
      return;
    }

    dispatch({
      type: Types.DESTROY,
      payload: {
        id: id
      }
    });
  }, [dispatch]);

  var destroyByRootId = React.useCallback(function (rootId) {
    if (!rootId) {
      console.error(MISSED_MODAL_ROOT_ID_ERROR_MESSAGE);
      return;
    }

    dispatch({
      type: Types.DESTROY_BY_ROOT_ID,
      payload: {
        rootId: rootId
      }
    });
  }, [dispatch]);
  var show = React.useCallback(function (component, props, options) {
    var id = uid(8);

    if (options && options.rootId) {
      id = options.rootId + "." + id;
    }

    dispatch({
      type: Types.SHOW,
      payload: {
        id: id,
        component: component,
        props: props,
        options: options
      }
    });
    return {
      id: id,
      hide: function hide() {
        return _hide(id);
      },
      destroy: function destroy() {
        return _destroy(id);
      },
      update: function update(newProps) {
        return _update(id, newProps);
      }
    };
  }, [dispatch, _hide, _destroy, _update]);

  var renderState = function renderState() {
    return Object.keys(state).map(function (id) {
      var _state$id = state[id],
          Component = _state$id.component,
          props = _state$id.props,
          options = _state$id.options;

      var handleClose = function handleClose() {
        if (options && options.destroyOnClose) {
          _destroy(id);
        } else {
          _hide(id);
        }

        if (props && props.onClose) {
          props.onClose.apply(props, arguments);
        }
      };

      var handleExited = function handleExited() {
        var _props$TransitionProp;

        if (props === null || props === void 0 ? void 0 : props.onExited) {
          props.onExited.apply(props, arguments);
        }

        if (props === null || props === void 0 ? void 0 : (_props$TransitionProp = props.TransitionProps) === null || _props$TransitionProp === void 0 ? void 0 : _props$TransitionProp.onExited) {
          var _props$TransitionProp2;

          (_props$TransitionProp2 = props.TransitionProps).onExited.apply(_props$TransitionProp2, arguments);
        }

        _destroy(id);
      };

      var extraProps = {};

      if (!legacy) {
        extraProps = {
          TransitionProps: _extends({}, props === null || props === void 0 ? void 0 : props.TransitionProps, {
            onExited: handleExited
          })
        };
      } else {
        extraProps = {
          onExited: handleExited
        };
      }

      return React.createElement(Component, Object.assign({}, props, {
        key: id,
        onClose: handleClose
      }, options && !options.destroyOnClose && extraProps));
    });
  };

  return React.createElement(ModalContext.Provider, {
    value: {
      state: state,
      updateModal: _update,
      hideModal: _hide,
      destroyModal: _destroy,
      showModal: show,
      destroyModalsByRootId: destroyByRootId
    }
  }, children, renderState());
}

var defaultOptions = {
  disableAutoDestroy: false
};
function useModal(options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  var _defaultOptions$optio = _extends({}, defaultOptions, options),
      disableAutoDestroy = _defaultOptions$optio.disableAutoDestroy;

  var _useContext = useContext(ModalContext),
      showModal = _useContext.showModal,
      destroy = _useContext.destroyModalsByRootId,
      otherContextProps = _objectWithoutPropertiesLoose(_useContext, ["showModal", "destroyModalsByRootId"]);

  var id = useRef(uid(6));
  useEffect(function () {
    return function () {
      if (!disableAutoDestroy) {
        destroy(id.current);
      }
    };
  }, [disableAutoDestroy, destroy]);
  return _extends({
    showModal: useCallback(function (component, props, options) {
      return showModal(component, props, _extends({
        rootId: id.current
      }, options));
    }, [showModal])
  }, otherContextProps);
}

export default ModalProvider;
export { useModal };
//# sourceMappingURL=mui-modal-provider.esm.js.map
