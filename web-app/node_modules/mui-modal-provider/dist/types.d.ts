import { ComponentType } from 'react';
export declare type ModalComponent<P> = ComponentType<P>;
export declare type ModalComponentProps<P> = Omit<P, 'open'>;
export declare type Props = {
    open?: Boolean;
    [key: string]: any;
};
export declare type Options = {
    destroyOnClose?: boolean;
    rootId?: string;
};
export declare type State = {
    [id: string]: StateElement;
};
export declare type StateElement = {
    component: ComponentType<any>;
    props?: Props;
    options?: Options;
};
export declare type ActionMap<M extends {
    [index: string]: any;
}> = {
    [Key in keyof M]: M[Key] extends undefined ? {
        type: Key;
    } : {
        type: Key;
        payload: M[Key];
    };
};
export declare type UpdateFn = <P extends Props>(id: string, props: Partial<ModalComponentProps<P>>) => void;
export declare type HideFn = (id: string) => void;
export declare type DestroyFn = (id: string) => void;
export declare type DestroyByRootIdFn = (rootId: string) => void;
export declare type ShowFn = <P extends Props>(component: ComponentType<P>, props?: ModalComponentProps<P>, options?: Options) => ShowFnOutput<P>;
export declare type ShowFnOutput<P> = {
    id: string;
    hide: () => void;
    destroy: () => void;
    update: (newProps: Partial<ModalComponentProps<P>>) => void;
};
